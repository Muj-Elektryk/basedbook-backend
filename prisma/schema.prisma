// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  username        String           @unique
  surname         String
  class_name      String
  passwordHash    String
  profileDesc     String
  avatar          String
  postsProjects   String
  skills          String
  profileSettings String
  loginID         Int
  email           String           @unique
  restURL         RestURL          @relation(fields: [restURLId], references: [id])
  restURLId       Int
  certificate     String
  fingerprint     String
  privateKey      String
  firebaseToken   String
  spottedPost     SpottedPost[]
  project         Project[]
  report          Report[]
  UserProject     UserProject?     @relation(fields: [userProjectId], references: [id])
  userProjectId   Int?
  Like            Like[]
  Dislike         Dislike[]
  isVerified      Boolean
  UnverifiedUser  UnverifiedUser[]
}

model UnverifiedUser {
  tempId String @id
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model RestURL {
  id    Int    @id @default(autoincrement())
  url   String @unique
  users User[] @relation()
}

model SpottedPost {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  title       String
  text        String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int
  isAnonymous Boolean
  Report      Report[]
  Like        Like[]
  Dislike     Dislike[]
}

model Like {
  id     Int         @id @default(autoincrement())
  post   SpottedPost @relation(fields: [postId], references: [id])
  postId Int
  user   User        @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, postId])
}

model Dislike {
  id     Int         @id @default(autoincrement())
  post   SpottedPost @relation(fields: [postId], references: [id])
  postId Int
  user   User        @relation(fields: [userId], references: [id])
  userId Int

  @@unique([userId, postId])
}

model Project {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  title       String
  text        String
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  Report      Report[]
  UserProject UserProject[]
}

model UserProject {
  id        Int      @id @default(autoincrement())
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  Users     User[]   @relation()
}

model Report {
  Id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [id])
  userId        Int
  spottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id])
  spottedPostId Int?
  project       Project?     @relation(fields: [projectId], references: [id])
  projectId     Int?
  createdAt     DateTime     @default(now())
  reason        String
}
