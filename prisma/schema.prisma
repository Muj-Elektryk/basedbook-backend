generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  name                 String?
  username             String                 @unique
  surname              String?
  class_name           String?
  passwordHash         String
  isBanned             Boolean                @default(false)
  profileDesc          String
  loginID              Int?
  email                String                 @unique
  restURLId            Int?
  certificate          String?
  fingerprint          String?
  privateKey           String?
  firebaseToken        String?
  isVerified           Boolean                @default(false)
  avatar               Bytes?
  darkTheme            Boolean                @default(false)
  facebook             String?
  instagram            String?
  website              String?
  youtube              String?
  userId               Int?
  facebookId           String?                @unique
  googleId             String?                @unique
  newsLetter           Boolean                @default(false)
  Comment              Comment[]
  Faq                  Faq[]
  Following            Follows[]              @relation("follower")
  Followers            Follows[]              @relation("following")
  GroupAdmin           GroupAdmin[]
  GroupMember          GroupMember[]
  GroupPost            GroupPost[]
  project              Project[]
  report               Report[]
  SpottedComment       SpottedComment[]
  SpottedLikes         SpottedLikes[]
  spottedPost          SpottedPost[]
  UnverifiedUser       UnverifiedUser[]
  restURL              RestURL?               @relation(fields: [restURLId], references: [id], onDelete: Cascade)
  UserPost             UserPost[]
  UserProject          UserProject[]
  userSkills           UserSkils[]
  Olympics             Olympics[]             @relation("OlympicsToUser")
  Roles                Roles[]
  PasswordResetRequest PasswordResetRequest[]
  sentMessages         Message[]              @relation("sentMessages")
  addedToConversations ConversationUser[]     @relation("addedBy")
  conversationsUsers   ConversationUser[]     @relation("userInConversation")
  totpSecret           String?
}

model Conversation {
  id                   Int                @id @default(autoincrement())
  name                 String?
  messages             Message[]
  usersInConversations ConversationUser[]
}

model Message {
  id             BigInt       @id @default(autoincrement())
  content        String?
  senderId       Int
  conversationId Int
  sendTime       DateTime     @default(now())
  sender         User         @relation("sentMessages", fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  editTime       DateTime?    @updatedAt
  isEdited       Boolean      @default(false)
}

model ConversationUser {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id], "userInConversation")
  conversationId Int
  userId         Int
  addedById      Int?
  addedBy        User?        @relation(fields: [addedById], references: [id], "addedBy")
  addedTime      DateTime?    @default(now())
  isAccepted     Boolean      @default(false)
  acceptedTime   DateTime?
  isAdmin        Boolean      @default(false)
  readTime       DateTime?

  @@unique([conversationId, userId])
}

model Roles {
  id     Int  @id @default(autoincrement())
  role   Role @default(USER)
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follows {
  followerId  Int
  followingId Int
  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model UserSkils {
  id       Int          @id @default(autoincrement())
  skillId  Int
  userId   Int
  skillLvl enumSkillLvl
  skill    Skills       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skills {
  id         Int         @id @default(autoincrement())
  name       String
  userSkills UserSkils[]
}

model UnverifiedUser {
  tempId String @id
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RestURL {
  id    Int    @id @default(autoincrement())
  url   String @unique
  users User[]
}

model SpottedPost {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  title          String
  text           String
  authorId       Int
  isAnonymous    Boolean
  Comment        Comment[]
  Report         Report[]
  SpottedComment SpottedComment[]
  SpottedLikes   SpottedLikes[]
  author         User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model SpottedLikes {
  id     Int         @id @default(autoincrement())
  postId Int
  userId Int
  post   SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Project {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  title       String
  text        String
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Report      Report[]
  UserProject UserProject[]
}

model UserProject {
  id        Int     @id @default(autoincrement())
  projectId Int
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Report {
  Id            Int          @id @default(autoincrement())
  userId        Int
  createdAt     DateTime     @default(now())
  reason        String
  projectId     Int?
  spottedPostId Int?
  groupPostId   Int?
  userPostId    Int?
  GroupPost     GroupPost?   @relation(fields: [groupPostId], references: [id])
  project       Project?     @relation(fields: [projectId], references: [id])
  spottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  UserPost      UserPost?    @relation(fields: [userPostId], references: [id])
}

model Comment {
  id       Int         @id @default(autoincrement())
  text     String
  postId   Int
  parentId Int?
  authorId Int
  user     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?    @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[]   @relation("ChildComments")
  post     SpottedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Group {
  Id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  GroupAdmin  GroupAdmin[]
  GroupMember GroupMember[]
}

model GroupAdmin {
  Id      Int    @id @default(autoincrement())
  groupId Int?
  userId  Int
  group   Group? @relation(fields: [groupId], references: [Id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupMember {
  Id      Int    @id @default(autoincrement())
  groupId Int?
  userId  Int
  group   Group? @relation(fields: [groupId], references: [Id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GroupPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Report    Report[]
}

model UserPost {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  text      String
  authorId  Int
  Report    Report[]
  author    User     @relation(fields: [authorId], references: [id])
}

model Olympics {
  id              Int      @id @default(autoincrement())
  registrationEnd DateTime
  startsAt        DateTime
  endsAt          DateTime
  title           String
  description     String
  prizePool       Int
  organisators    String[]
  participants    User[]   @relation("OlympicsToUser")
}

model SpottedComment {
  Id            Int          @id @default(autoincrement())
  userId        Int
  spottedPostId Int?
  createdAt     DateTime     @default(now())
  SpottedPost   SpottedPost? @relation(fields: [spottedPostId], references: [id], onDelete: Cascade)
  User          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Faq {
  id         Int     @id @default(autoincrement())
  question   String  @unique
  answer     String?
  isAnswered Boolean @default(false)
  askerId    Int?
  hierarchy  Int     @default(0)
  asker      User?   @relation(fields: [askerId], references: [id], onDelete: SetNull)
}

model PasswordResetRequest {
  hash   String @id
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MODERATOR
}

enum enumSkillLvl {
  beginner
  intermediate
  advanced
}
